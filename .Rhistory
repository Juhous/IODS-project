plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
inf.meas <- influence.measures(model)[[1]]
kable(inf.meas, "html", row.names = T) %>%
kable_styling(bootstrap_options = c("hover", "condensed")) %>%
scroll_box(height = "250px")
plot(analysis$Points, model$residuals)
plot(model$residuals, analysis$Points)
plot(analysis$Points, model$residuals)
ggplot(analysis, (analysis$Points, model$residuals)) + geom_point()
ggplot(analysis, aes(analysis$Points, model$residuals)) + geom_point()
ggplot(analysis, aes(analysis$Points, model$residuals)) + geom_point() + geom_smooth()
ggplot(analysis, aes(analysis$Points, model$residuals)) + geom_point() + geom_smooth(method="lm")
library(knitr)
library(kableExtra)
info <- read.delim("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-meta.txt",
header = F, sep = "\t", encoding = "latin1")[12:71,] %>%
str_split(boundary(type = "word"), n = 2, simplify = T) %>% as.data.frame()
names(info) <- c("Variable", "Description")
kable(info, "html") %>%
kable_styling(bootstrap_options = c("hover", "condensed")) %>%
scroll_box(height = "250px")
ggpairs(analysis,
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("points", alpha = .2, size = .6),
combo = wrap("facethist", bins = 10))) +
theme(
axis.text.x = element_text(angle = 90, color = "black", size = 7, vjust = .5),
axis.text.y = element_text(color = "black", size = 7))
summary(analysis)
library(knitr)
library(kableExtra)
info <- read.delim("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-meta.txt",
header = F, sep = "\t", encoding = "latin1")[12:71,] %>%
str_split(boundary(type = "word"), n = 2, simplify = T) %>% as.data.frame()
names(info) <- c("Variable", "Description")
kable(info, "html") %>%
kable_styling(bootstrap_options = c("hover", "condensed")) %>%
scroll_box(height = "250px")
model <- lm(Points ~ Attitude + deep + stra, data = analysis)
summary(model)
model <- lm(Points ~ Attitude, data = analysis)
summary(model)
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
par(mfrow = c(2,2), oma = c(0, 0, 2, 0), mar = c(2.5,3,2,0.5), mgp = c(1.5,.5,0))
plot(model, which = c(1,2), add.smooth = T)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
# Counted the normalized residuals long way for fun. Following code can be used to check results
# sum(norm.res != rstandard(model))
aa <- analysis$Attitude
leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
ggpairs(analysis,
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = wrap("points", alpha = .2, size = .6),
combo = wrap("facethist", bins = 10))) +
theme(
axis.text.x = element_text(angle = 90, color = "black", size = 7, vjust = .5),
axis.text.y = element_text(color = "black", size = 7))
summary(analysis)
shapiro.test(analysis$Points)
shapiro.test(analysis$Age)
qqplot(analysis$Points)
shapiro.test(rstandard(model))$p.value
?shapiro.test
rnorm(10)
rnorm(100)
shapiro.test(rnorm(100))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(10000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
a <- rnorm(1000)
a
shapiro.test(a)
qqnorm(a)
a <- rnorm(1000)
shapiro.test(a)
qqnorm(a)
plot(a)
density(a)
methods(plot())
methods(plot
)
plot.density(a)
?plot.density
density(a)
plot(density(a)=
plot(density(a))
a <- rnorm(1000)
shapiro.test(a)
qqnorm(a)
plot(density(a))
a <- rnorm(1000)
shapiro.test(a)
a <- rnorm(1000)
shapiro.test(a)
a <- rnorm(1000)
shapiro.test(a)
a <- rnorm(1000)
shapiro.test(a)
a <- rnorm(1000)
shapiro.test(a)
a <- rnorm(1000)
shapiro.test(a)
plot(density(a))
qqnorm(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(100)
shapiro.test(a)
a <- rnorm(10)
shapiro.test(a)
a <- rnorm(10)
shapiro.test(a)
a <- rnorm(10)
shapiro.test(a)
a <- rnorm(10)
shapiro.test(a)
plot(density(a))
qqnorm(a)
shapiro.test(rstandard(model))$p.value
shapiro.test(analysis$Points)
qqnorm(analysis$Points)
shapiro.test(analysis$stra)
shapiro.test(analysis$Age)
qqnorm(analysis$Age)
qqnorm(analysis$Points)
plot(model$fitted.values, model$residuals)
plot(model$fitted.values, analysis$Points)
ggplot(analysis, aes(analysis$Points, model$residuals)) + geom_point() + geom_smooth(method="lm")
ggplot(analysis, aes(analysis$Points, model$residuals)) + geom_point() + geom_smooth(method="lm", show.legend = T)
?geom_smooth
ggplot(analysis, aes(analysis$Points, model$residuals)) + geom_point() + geom_smooth(method="lm", show.legend = T)
model
ggplot(analysis, aes(analysis$Points, analysis$Attitude)) + geom_point() + geom_smooth(method="lm", show.legend = T)
ggplot(analysis, aes(analysis$Points, model$residuals)) + geom_point() + geom_smooth(method="lm", show.legend = T)
ggplot(analysis, aes(analysis$Attitude, model$residuals)) + geom_point() + geom_smooth(method="lm", show.legend = T)
plot(rstandard(model), model$fitted.values
)
plot(model$fitted.values, rstandard(model))
plot(analysis$Points, rstandard(model))
plot(analysis$Points, model$residuals)
plot(model$fitted.values, model$residuals)
plot(analysis$Points, model$residuals)
plot(analysis$Attitude, model$residuals)
plot(model$fitted.values, rstandard(model))
plot(analysis$Attitude, rstandard(model))
plot(model$fitted.values, model$residuals)
plot(analysis$Attitude, model$residuals)
log(analysis$Age)
qqnorm(log(analysis$Age))
shapiro.test(log(analysis$Age))
shapiro.test(analysis$Age)
model <- lm(Points ~ Attitude + deep + stra, data = analysis)
summary(model)
model <- lm(Points ~ Attitude + deep + stra + Attitude:deep, data = analysis)
summary(model)
model <- lm(Points ~ Attitude + deep + Attitude:deep, data = analysis)
summary(model)
model <- lm(Points ~ Attitude + deep + stra, data = analysis)
summary(model)
?lm
model <- lm(Points ~ deep, data = analysis)
summary(model)
model <- lm(Points ~ deep, data = analysis)
summary(model)
model <- lm(Points ~ Attitude + deep + stra, data = analysis)
summary(model)
model <- lm(Points ~ Attitude, data = analysis)
summary(model)
inf.meas <- influence.measures(model)[[1]]
kable(inf.meas, "html", row.names = T) %>%
kable_styling(bootstrap_options = c("hover", "condensed")) %>%
scroll_box(height = "250px")
inf.meas <- influence.measures(model)[[1]]
inf.meas <- influence.measures(model)[[1]]
inf.meas
influence.measures(model)[[1]]
influence.measures(model)
as.data.frame(influence.measures(model = ))
as.data.frame(influence.measures(model))
influence.measures(model)
str(influence.measures(model))
str(influence.measures(model))[2]
str(influence.measures(model))[[2]]
influence.measures(model)[[2]]
install.packages("plotly")
library("plotly")
plot(model, which = c(1,2), add.smooth = T)
b <- plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
c <- plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
b
b <- plot(leverage, norm.res, xlab = "Leverage", ylab = "Standardized residuals")
c <- plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
b
c
b <- ggplot(analysis, aes(leverage, norm.res)) +
geompoint() +
aes(xlab("Leverage", ylab = "Standardized residuals"))
b <- ggplot(analysis, aes(leverage, norm.res)) +
geom_point() +
aes(xlab("Leverage", ylab = "Standardized residuals"))
b <- ggplot(analysis, aes(leverage, norm.res)) +
geom_point() +
aes(xlab("Leverage", ylab = "Standardized residuals"))
b
b <- ggplot(analysis, aes(leverage, norm.res)) +
geom_point() +
xlab("Leverage") + ylab ("Standardized residuals")
b
ggplotly(b)
?ggplotly
ggplotly(b)
ggplotly(b, name = "cc")
ggplotly(b, hoverinfo == "name")
?ggplotly
a <- plot(model, which = c(1,2), add.smooth = T)
?ppoints
getAnywhere(qqpoints)
getAnywhere(qqnorm)
getAnywhere(stats:::qqnorm)
stats:::qqnorm)
stats:::qqnorm
methods(qqnorm)
?qqnorm.default
?qqnorm.default()
methods(qqnomrm)
methods(qqnorm)
methods("qqnorm")
methods("qqnorm.default")
View(qqnorm.default)
View(qqnorm)
getAnywhere(qqnorm.default)
qqnorm(model)
qqnorm(model$residuals)
qqnorm(model$residuals, plot = F)
qqnorm(model$residuals, plot.it = F)
?ppoints
ggplot(model) + geom_qq()
ggplot(model$residuals) + geom_qq()
ggplot(model, aes(residuals)) + geom_qq()
ggplot(model, aes(model$residuals)) + geom_qq()
ggplot(model) + geom_point(stat = qq)
ggplot(model) + geom_point(stat = "qq")
ggplot(model, aes(sample = residuals)) + geom_point(stat = "qq")
str(model)
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d
d <- data.frame()
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(166)
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(166,)
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(,166)
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(0,166)
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(166,0)
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(166,0)
d
?data.frame
d <- data.frame(leverage = numeric())
d <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(leverage = numeric())
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d <- data.frame(leverage = numeric())
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
leverage
d
d <- data.frame(leverage = numeric())
str(d)
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d$leverage <- as.data.frame((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d <- data.frame(leverage = numeric())
d$leverage <- as.data.frame((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d$leverage <- data.frame((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d <- data.frame((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d
str(d)
d <- as.data.frame((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d
d <- data.frame(leverage = numeric())
d$leverage <- ((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d
d <- data.frame(leverage = numeric())
d$leverage <- (aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa)
d$leverage <- as.numeric((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
as.numeric((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d$leverage <- as.numeric((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d <- data.frame(leverage = numeric())
d$leverage <- as.numeric((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
rm(d)
d$leverage <- as.numeric((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d$leverage <- as.numeric((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d <- data.frame(d, aa, norm.res, model$residuals, cooks.distance(model))
d <- as.numeric((aa-mean(aa))^2/sum((aa-mean(aa))^2)+1/length(aa))
d <- data.frame(d, aa, norm.res, model$residuals, cooks.distance(model))
d
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
attitude <- analysis$Attitude
leverage <- as.numeric((attitude-mean(attitude))^2/sum((attitude-mean(attitude))^2)+1/length(attitude))
d <- data.frame(d, Attitude, norm.res, model$residuals, cooks.distance(model))
d
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
attitude <- analysis$Attitude
leverage <- as.numeric((attitude-mean(attitude))^2/sum((attitude-mean(attitude))^2)+1/length(attitude))
cooks <- cooks.distance(model)
residuals <- residuals(model)
d <- data.frame(d, Attitude, norm.res, residuals)
d
d <- data.frame(attitude, residuals, norm.res, leverage, cooks)
d
ggplot(d, aes(sample = residuals)) + geom_point(stat = "qq")
d <- data.frame(id = row_number(), attitude, residuals, norm.res, leverage, cooks)
d <- data.frame(id = row_number(d), attitude, residuals, norm.res, leverage, cooks)
d <- data.frame(id = 1:166, attitude, residuals, norm.res, leverage, cooks)
d
analysis
head(d, 10)
attitude <- analysis$Attitude
fitted <- fitted(model)
residuals <- residuals(model)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
leverage <- as.numeric((attitude-mean(attitude))^2/sum((attitude-mean(attitude))^2)+1/length(attitude))
attitude <- analysis$Attitude
fitted <- fitted(model)
residuals <- residuals(model)
norm.res <- model$residuals/(sqrt(deviance(model)/df.residual(model))*sqrt(1-hatvalues(model)))
leverage <- as.numeric((attitude-mean(attitude))^2/sum((attitude-mean(attitude))^2)+1/length(attitude))
cooks <- cooks.distance(model)
d <- data.frame(id = 1:166, attitude, fitted, residuals, norm.res, leverage, cooks)
d
p <- plot_ly(d, x = ~fitted, y = ~residuals, type = 'scatter', mode = 'markers',
text = ~paste('Id: ', id))
p
p <- plot_ly(d, x = ~fitted, y = ~residuals, type = 'scatter', mode = 'markers',
text = ~paste('Id: ', id), hoverinfo = "text")
p
p3 <- ggplot(d, aes(sample = residuals)) + geom_point(stat = "qq")
ggplotly(p3, text = ~paste('Id: ', d$id), hoverinfo = "text"))
p3 <- ggplot(d, aes(sample = residuals)) + geom_point(stat = "qq")
ggplotly(p3, text = ~paste('Id: ', d$id), hoverinfo = "text"))
ggplotly(p3, text = ~paste('Id: ', d$id, hoverinfo = "text"))
ggplotly(p3, text = ~paste('Id: ', d$id), hoverinfo = "text")
?ggplotly
p3 <- ggplot(d, aes(sample = residuals, text = id)) + geom_point(stat = "qq")
ggplotly(p3, tooltip = "text")
p3
p3 <- ggplot(d, aes(sample = residuals, text = id)) + geom_point(stat = "qq")
p3
ggplotly(p3, tooltip = "text")
p3 <- ggplot(d, aes(sample = residuals)) + geom_point(aes(text = id, stat = "qq")
p3
ggplotly(p3, tooltip = "text")
b <- ggplot(analysis, aes(leverage, norm.res)) +
geom_point() +
xlab("Leverage") + ylab ("Standardized residuals")
b
ggplotly(b, hoverinfo == "name")
c <- plot(cooks.distance(model), norm.res, xlab = "Cook's distance", ylab = "Standardized residuals")
c
p3 <- ggplot(d, aes(sample = residuals)) + geom_point(aes(text = id), stat = "qq")
p3
ggplotly(p3, tooltip = "text")
devtools::install_github("hadley/ggplot2")
p3 <- ggplot(d, aes(sample = residuals)) + geom_point(aes(text = id), stat = "qq")
p3
ggplotly(p3, tooltip = "text")
